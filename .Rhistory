head(faithful)
summary(faithful) #EDA to answer question 1 and 2 from last slide
# analysis and modeling to address question 3!
plot(eruptions ~ waiting, data=faithful)
eruptions.predict.model = lm(eruptions ~ waiting, data=faithful) #modeling
coefficients(eruptions.predict.model)
new.df <- data.frame(waiting=c(50,120)) #new data for which you prediction
predict(eruptions.predict.model, new.df) #prediction
########### Clear Environment History ##############
rm(list = ls())
################## Review of lm ####################
# We know how to take couple of features (columns)
# and try to fit a model with lm, predict using this model.
data(faithful)
head(faithful)
summary(faithful)
plot(eruptions ~ waiting, data=faithful)
eruptions.predict.model = lm(eruptions ~ waiting, data=faithful)
coefficients(eruptions.predict.model)
abline(eruptions.predict.model)
new.df <- data.frame(waiting=c(50,150))
predict(eruptions.predict.model, new.df)
# Evaluate the model
summary(eruptions.predict.model)
plot(eruptions.predict.model)
########### Clear Environment History ##############
rm(list = ls())
################## Review of lm ####################
# We know how to take couple of features (columns)
# and try to fit a model with lm, predict using this model.
data(faithful)
########### Clear Environment History ##############
rm(list = ls())
################## Review of lm ####################
# We know how to take couple of features (columns)
# and try to fit a model with lm, predict using this model.
data(faithful)
head(faithful)
summary(faithful)
plot(eruptions ~ waiting, data=faithful)
eruptions.predict.model = lm(eruptions ~ waiting, data=faithful)
coefficients(eruptions.predict.model)
abline(eruptions.predict.model)
new.df <- data.frame(waiting=c(50,150))
predict(eruptions.predict.model, new.df)
# Evaluate the model
summary(eruptions.predict.model)
plot(eruptions.predict.model)
head(Default)
default<-data.frame(Default)
set.seed(123)
sample <- sample(c(TRUE, FALSE), nrow(default), replace = T, prob = c(0.6,0.4))
train <- default[sample, ]
?mtcars
View(mtcars)
?faithful
?longley
?BostonHousing
?BostonHousing
data(BostonHousing)
data(BostonHousing2)
?BostonHousing2
??BostonHousing2
?BreastCancer
?PimaIndiansDiabetes
install.packages("mlbench")
library(mlbench)
?PimaIndiansDiabetes
# ?PimaIndiansDiabetes
#
# data(BostonHousing2)
head(PimaIndiansDiabetes)
data(dimaIndiansDiabetes)
# Boston Housing Data
data(BostonHousing)
dim(BostonHousing)
head(BostonHousing)
summary(BostonHousing)
data(PimaIndiansDiabetes)
head(PimaIndiansDiabetes)
summary(PimaIndiansDiabetes)
plot(age ~ insulin, data=PimaIndiansDiabetes)
plot(insulin ~ age, data=PimaIndiansDiabetes)
plot(pregnant ~ age, data=PimaIndiansDiabetes)
plot(pressure ~ age, data=PimaIndiansDiabetes)
plot(triceps ~ age, data=PimaIndiansDiabetes)
plot(pressure ~ glucose, data=PimaIndiansDiabetes)
plot(pressure ~ mass, data=PimaIndiansDiabetes)
plot(inculin ~ mass, data=PimaIndiansDiabetes)
plot(insulin ~ mass, data=PimaIndiansDiabetes)
plot(mass ~ inculin, data=PimaIndiansDiabetes)
plot(mass ~ insulin, data=PimaIndiansDiabetes)
# Boston Housing Data
data(BostonHousing)
dim(BostonHousing)
head(BostonHousing)
plot(tax ~ age, data=faithful)
names(BostonHousing)
plot(tax ~ age, data=BostonHousing)
plot(crim ~ age, data=BostonHousing)
plot(nox ~ age, data=BostonHousing)
plot(rad ~ age, data=BostonHousing)
plot(lstat ~ age, data=BostonHousing)
plot(medv ~ age, data=BostonHousing)
plot(ptratio ~ age, data=BostonHousing)
plot(b ~ age, data=BostonHousing)
plot(indus ~ age, data=BostonHousing)
plot(chas ~ age, data=BostonHousing)
plot(crim ~ zn, data=BostonHousing)
plot(crim ~ tax, data=BostonHousing)
plot(dis ~ tax, data=BostonHousing)
plot(rm ~ tax, data=BostonHousing)
plot(medv ~ tax, data=BostonHousing)
data(BreastCancer)
dim(BreastCancer)
levels(BreastCancer$Class)
head(BreastCancer)
names(BreastCancer)
plot(Cell.size ~ Class, data=PimaIndiansDiabetes)
levels(BreastCancer$Class)
plot(Cell.size ~ Class, data=BreastCancer)
plot(Cell.size ~ Cell.shape, data=BreastCancer)
plot(Cell.size ~ Cl.thickness, data=BreastCancer)
plot(Cell.size ~ Mitoses, data=BreastCancer)
plot(Cell.size ~ Normal.nucleoli, data=BreastCancer)
plot(Normal.nucleoli ~ Cell.size, data=BreastCancer)
plot(Bl.cromatin ~ Cell.size, data=BreastCancer)
plot(Bl.cromatin ~ ormal.nucleoli, data=BreastCancer)
plot(Bl.cromatin ~ normal.nucleoli, data=BreastCancer)
plot(Bl.cromatin ~ normal.nucleoli, data=BreastCancer)
plot(Bl.cromatin ~ Normal.nucleoli, data=BreastCancer)
plot(Bl.cromatin ~ Normal.nucleoli, data=BreastCancer)
plot(crim ~ dis, data=BostonHousing)
plot(rad ~ dis, data=BostonHousing)
plot(tax ~ dis, data=BostonHousing)
plot(tax ~ age, data=BostonHousing)
plot(indus ~ age, data=BostonHousing)
plot(indus ~ crim, data=BostonHousing)
plot(indus ~ nox, data=BostonHousing)
?ability.cov
head(ability.cov)
names(ability.cov)
?cars
head(cars)
names(cars)
plot(speed ~ distance, data=cars)
plot(speed ~ dist, data=cars)
?ldeaths
names(ldeaths)
names(quakes)
plot(mag ~ depth, data=quakes)
names(USAccDeaths)
names(USArrests)
plot(Murder ~ UrbanPop, data=USArrests)
plot(Assault ~ UrbanPop, data=USArrests)
plot(Rape ~ UrbanPop, data=USArrests)
names(USJudgeRatings)
plot(DILG ~ INTG, data=USJudgeRatings)
plot(PREP ~ INTG, data=USJudgeRatings)
plot(PREP ~ FAMI, data=USJudgeRatings)
require(graphics)
pairs(USJudgeRatings, main = "USJudgeRatings data")
plot(DMNR ~ CFMG, data=USJudgeRatings)
plot(CFMG ~ DMR, data=USJudgeRatings)
plot(CFMG ~ DMNR, data=USJudgeRatings)
eruptions.predict.model = lm(CFMG ~ DMNR, data=USJudgeRatings) #modeling
judge.predict.model = lm(CFMG ~ DMNR, data=USJudgeRatings) #modeling
coefficients(judge.predict.model)
new.df <- data.frame(waiting=c(6,7.5)) #new data for which you prediction
predict(judge.predict.model, new.df) #prediction
new.df <- data.frame(DMNR=c(6,7.5)) #new data for which you prediction
predict(judge.predict.model, new.df) #prediction
abline(judge.predict.model)
new.df <- data.frame(DMNR=c(6,7.5, 9)) #new data for which you prediction
predict(judge.predict.model, new.df) #prediction
summary(judge.predict.model)
plot(judge.predict.model)
View(BreastCancer)
library (ISLR)
data(BreastCancer)
default<-data.frame(BreastCancer)
set.seed(123)
sample <- sample(c(TRUE, FALSE), nrow(default), replace = T, prob = c(0.6,0.4))
train <- default[sample, ]
test <- default[!sample, ]
names(BreastCancer)
model <- glm(Normal.nucleoli ~ class, family = "binomial", data = train)
data("Default")
force(Default)
default<-data.frame(Default)
set.seed(123)
sample <- sample(c(TRUE, FALSE), nrow(default), replace = T, prob = c(0.6,0.4))
train <- default[sample, ]
test <- default[!sample, ]
model <- glm(default ~ balance, family = "binomial", data = train)
predict(model, data.frame(balance = c(1000, 2000)), type = "response")
summary(model)
library(tidyverse)
library(broom)
tidy(model)
library(dplyr)
default %>%
mutate(prob = ifelse(default == "Yes", 1, 0)) %>%
ggplot(aes(balance, prob)) +
geom_point(alpha = .15) +
geom_smooth(method = "glm", method.args = list(family = "binomial")) +
ggtitle("Logistic regression model fit") +
xlab("Balance") +
ylab("Probability of Default")
model <- glm(income ~ balance, family = "binomial", data = train)
model <- glm(default ~ income, family = "binomial", data = train)
summary(model)
tidy(model)
library(dplyr)
default %>%
mutate(prob = ifelse(default == "Yes", 1, 0)) %>%
ggplot(aes(balance, prob)) +
geom_point(alpha = .15) +
geom_smooth(method = "glm", method.args = list(family = "binomial")) +
ggtitle("Logistic regression model fit") +
xlab("Balance") +
ylab("Probability of Default")
model <- glm(student ~ income, family = "binomial", data = train)
# predict(model, data.frame(balance = c(1000, 2000)), type = "response")
summary(model)
tidy(model)
default %>%
mutate(prob = ifelse(default == "Yes", 1, 0)) %>%
ggplot(aes(balance, prob)) +
geom_point(alpha = .15) +
geom_smooth(method = "glm", method.args = list(family = "binomial")) +
ggtitle("Logistic regression model fit") +
xlab("Balance") +
ylab("Probability of Default")
col2=ifelse(BreastCancer$Class=="malignant",1,0)
cbind(BreastCancer$Class,col2)
BreastCancer = bind(BreastCancer$Class,col2)
BreastCancer <- bind(BreastCancer$Class,col2)
BreastCancer <- cbind(BreastCancer$Class,col2)
BreastCancer<-data.frame(data(BreastCancer))
BreastCancer<-data.frame((BreastCancer))
BreastCancer<-data.frame((BreastCancer))
View(BreastCancer)
BreastCancer<-data.frame(data(BreastCancer))
View(BreastCancer)
data(BreastCancer)
col2=ifelse(BreastCancer$Class=="malignant",1,0)
BreastCancer <- cbind(BreastCancer$Class,col2)
View(BreastCancer)
data(BreastCancer)
BreastCancer$Class<-ifelse(BreastCancer$Class=="malignant",1,0)
set.seed(123)
sample <- sample(c(TRUE, FALSE), nrow(default), replace = T, prob = c(0.6,0.4))
train <- BreastCancer[sample, ]
test <- BreastCancer[!sample, ]
View(BreastCancer)
names(BreastCancer)
model <- glm(Normal.nucleoli ~ Class, family = "binomial", data = train)
# predict(model, data.frame(balance = c(1000, 2000)), type = "response")
summary(model)
tidy(model)
default %>%
mutate(prob = ifelse(default == "Yes", 1, 0)) %>%
ggplot(aes(balance, prob)) +
geom_point(alpha = .15) +
geom_smooth(method = "glm", method.args = list(family = "binomial")) +
ggtitle("Logistic regression model fit") +
xlab("Balance") +
ylab("Probability of Default")
BreastCancer %>%
mutate(prob = ifelse(default == "Yes", 1, 0)) %>%
ggplot(aes(Normal.nucleoli, prob)) +
geom_point(alpha = .15) +
geom_smooth(method = "glm", method.args = list(family = "binomial")) +
ggtitle("Logistic regression model fit") +
xlab("Balance") +
ylab("Probability of Default")
rm(list = ls())
library(dplyr)
library (ISLR)
library(broom)
library(tidyverse)
data(BreastCancer)
names(BreastCancer)
BreastCancer$Class<-ifelse(BreastCancer$Class=="malignant",1,0)
set.seed(123)
sample <- sample(c(1, 0), nrow(BreastCancer), replace = T, prob = c(0.6,0.4))
train <- BreastCancer[sample, ]
test <- BreastCancer[!sample, ]
model <- glm(Normal.nucleoli ~ Class, family = "binomial", data = train)
# predict(model, data.frame(balance = c(1000, 2000)), type = "response")
summary(model)
tidy(model)
BreastCancer %>%
mutate(prob = ifelse(BreastCancer == "Yes", 1, 0)) %>%
ggplot(aes(Normal.nucleoli, prob)) +
geom_point(alpha = .15) +
geom_smooth(method = "glm", method.args = list(family = "binomial")) +
ggtitle("Logistic regression model fit") +
xlab("Balance") +
ylab("Probability of Default")
data(Default)
rm(list = ls())
data(Default)
default<-data.frame(Default)
set.seed(123)
View(Default)
train <- default[sample, ]
test <- default[!sample, ]
data(Default)
default<-data.frame(Default)
set.seed(123)
sample <- sample(c(TRUE, FALSE), nrow(default), replace = T, prob = c(0.6,0.4))
train <- default[sample, ]
test <- default[!sample, ]
model <- glm(income ~ student, family = "binomial", data = train)
View(Default)
rm(list = ls())
data(Default)
Default<-data.frame(Default)
set.seed(123)
sample <- sample(c(TRUE, FALSE), nrow(Default), replace = T, prob = c(0.6,0.4))
train <- Default[sample, ]
test <- Default[!sample, ]
model <- glm(default ~ student, family = "binomial", data = train)
summary(model)
tidy(model)
default %>%
mutate(prob = ifelse(default == "Yes", 1, 0)) %>%
ggplot(aes(balance, prob)) +
geom_point(alpha = .15) +
geom_smooth(method = "glm", method.args = list(family = "binomial")) +
ggtitle("Logistic regression model fit") +
xlab("Balance") +
ylab("Probability of Default")
data(Default)
Default<-data.frame(Default)
set.seed(123)
sample <- sample(c(TRUE, FALSE), nrow(Default), replace = T, prob = c(0.6,0.4))
train <- Default[sample, ]
test <- Default[!sample, ]
model <- glm(default ~ income, family = "binomial", data = train)
# predict(model, data.frame(balance = c(1000, 2000)), type = "response")
summary(model)
tidy(model)
default %>%
mutate(prob = ifelse(default == "Yes", 1, 0)) %>%
ggplot(aes(balance, prob)) +
geom_point(alpha = .15) +
geom_smooth(method = "glm", method.args = list(family = "binomial")) +
ggtitle("Logistic regression model fit") +
xlab("Balance") +
ylab("Probability of Default")
Default %>%
mutate(prob = ifelse(default == "Yes", 1, 0)) %>%
ggplot(aes(balance, prob)) +
geom_point(alpha = .15) +
geom_smooth(method = "glm", method.args = list(family = "binomial")) +
ggtitle("Logistic regression model fit") +
xlab("Balance") +
ylab("Probability of Default")
data(Default)
Default<-data.frame(Default)
set.seed(123)
sample <- sample(c(TRUE, FALSE), nrow(Default), replace = T, prob = c(0.6,0.4))
train <- Default[sample, ]
test <- Default[!sample, ]
model <- glm(default ~ balance, family = "binomial", data = train)
# predict(model, data.frame(balance = c(1000, 2000)), type = "response")
summary(model)
tidy(model)
Default %>%
mutate(prob = ifelse(default == "Yes", 1, 0)) %>%
ggplot(aes(balance, prob)) +
geom_point(alpha = .15) +
geom_smooth(method = "glm", method.args = list(family = "binomial")) +
ggtitle("Logistic regression model fit") +
xlab("Balance") +
ylab("Probability of Default")
data(Default)
Default<-data.frame(Default)
set.seed(123)
sample <- sample(c(TRUE, FALSE), nrow(Default), replace = T, prob = c(0.6,0.4))
train <- Default[sample, ]
test <- Default[!sample, ]
model <- glm(default ~ income, family = "binomial", data = train)
# predict(model, data.frame(balance = c(1000, 2000)), type = "response")
summary(model)
tidy(model)
Default %>%
mutate(prob = ifelse(default == "Yes", 1, 0)) %>%
ggplot(aes(income, prob)) +
geom_point(alpha = .15) +
geom_smooth(method = "glm", method.args = list(family = "binomial")) +
ggtitle("Logistic regression model fit") +
Default %>%
mutate(prob = ifelse(default == "Yes", 1, 0)) %>%
ggplot(aes(income, prob)) +
geom_point(alpha = .15) +
geom_smooth(method = "glm", method.args = list(family = "binomial")) +
ggtitle("Logistic regression model fit")
Default %>%
mutate(prob = ifelse(default == "Yes", 1, 0)) %>%
ggplot(aes(income, prob)) +
geom_point(alpha = .15) +
geom_smooth(method = "glm", method.args = list(family = "binomial")) +
ggtitle("Logistic regression model fit") +
xlab("Income") +
ylab("Probability of Default")
data(Default)
Default<-data.frame(Default)
set.seed(123)
sample <- sample(c(TRUE, FALSE), nrow(Default), replace = T, prob = c(0.6,0.4))
train <- Default[sample, ]
test <- Default[!sample, ]
model <- glm(student ~ income, family = "binomial", data = train)
# predict(model, data.frame(balance = c(1000, 2000)), type = "response")
summary(model)
tidy(model)
Default %>%
mutate(prob = ifelse(student == "Yes", 1, 0)) %>%
ggplot(aes(income, prob)) +
geom_point(alpha = .15) +
geom_smooth(method = "glm", method.args = list(family = "binomial")) +
ggtitle("Logistic regression model fit") +
xlab("Income") +
ylab("Probability of Default")
data(BreastCancer)
set.seed(123)
# sample <- sample(c(1, 0), nrow(BreastCancer), replace = T, prob = c(0.6,0.4))
train <- BreastCancer[sample, ]
sample <- sample(c(1, 0), nrow(BreastCancer), replace = T, prob = c(0.6,0.4))
train <- BreastCancer[sample, ]
test <- BreastCancer[!sample, ]
model <- glm(Normal.nucleoli ~ Class, family = "binomial", data = train)
# predict(model, data.frame(balance = c(1000, 2000)), type = "response")
summary(model)
set.seed(123)
sample <- sample(c(TRUE, FALSE), nrow(BreastCancer), replace = T, prob = c(0.6,0.4))
train <- BreastCancer[sample, ]
test <- BreastCancer[!sample, ]
model <- glm(Normal.nucleoli ~ Class, family = "binomial", data = train)
# predict(model, data.frame(balance = c(1000, 2000)), type = "response")
summary(model)
tidy(model)
BreastCancer %>%
mutate(prob = ifelse(Class == "malignant", 1, 0)) %>%
ggplot(aes(Normal.nucleoli, prob)) +
geom_point(alpha = .15) +
geom_smooth(method = "glm", method.args = list(family = "binomial")) +
ggtitle("Logistic regression model fit") +
xlab("Balance") +
ylab("Probability of Default")
data(BreastCancer)
# names(BreastCancer)
BreastCancer$Class<-ifelse(BreastCancer$Class=="malignant",1,0)
set.seed(123)
sample <- sample(c(TRUE, FALSE), nrow(BreastCancer), replace = T, prob = c(0.6,0.4))
train <- BreastCancer[sample, ]
test <- BreastCancer[!sample, ]
model <- glm(Mitoses ~ Class, family = "binomial", data = train)
# predict(model, data.frame(balance = c(1000, 2000)), type = "response")
summary(model)
tidy(model)
BreastCancer %>%
mutate(prob = ifelse(Class == "malignant", 1, 0)) %>%
ggplot(aes(Mitoses, prob)) +
geom_point(alpha = .15) +
geom_smooth(method = "glm", method.args = list(family = "binomial")) +
ggtitle("Logistic regression model fit") +
xlab("Balance") +
ylab("Probability of Default")
data(Default)
Default<-data.frame(Default)
set.seed(123)
sample <- sample(c(TRUE, FALSE), nrow(Default), replace = T, prob = c(0.6,0.4))
train <- Default[sample, ]
test <- Default[!sample, ]
model <- glm(student ~ income, family = "binomial", data = train)
# predict(model, data.frame(balance = c(1000, 2000)), type = "response")
summary(model)
tidy(model)
Default %>%
mutate(prob = ifelse(student == "Yes", 1, 0)) %>%
ggplot(aes(income, prob)) +
geom_point(alpha = .15) +
geom_smooth(method = "glm", method.args = list(family = "binomial")) +
ggtitle("Logistic regression model fit") +
xlab("Income") +
ylab("Probability of being a Student")
# Lawyers' ratings of state judges in the US Superior Court.
?USJudgeRatings
head(USJudgeRatings)
names(USJudgeRatings)
plot(CFMG ~ DMNR, data=USJudgeRatings)
judge.predict.model = lm(CFMG ~ DMNR, data=USJudgeRatings) #modeling
coefficients(judge.predict.model)
abline(judge.predict.model)
new.df <- data.frame(DMNR=c(6,7.5, 9)) #new data for which you prediction
predict(judge.predict.model, new.df) #prediction
summary(judge.predict.model)
plot(judge.predict.model)
require(graphics)
pairs(USJudgeRatings, main = "USJudgeRatings data")
shiny::runApp('EAS 345 - R/project')
runApp('EAS 345 - R/project')
---
title: "Inline Output in R Markdown Documents"
knitr::opts_chunk$set(echo = TRUE)
plot(pressure)
school_info <- read_excel('schools.xlsx')
library(shiny); runApp('EAS 345 - R/project/phase6.R')
